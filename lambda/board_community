"use strict";
const mongoose = require('mongoose');
const autoIncrement = require('mongoose-auto-increment');

const MONGODB_URI = process.env.MONGODB_URI;

/* 하나의 연결 객체를 반복적으로 사용합니다. */
let connection = null;
const connect = () => {
    if (connection && mongoose.connection.readyState === 1) return Promise.resolve(connection);
    return mongoose.connect(process.env.MONGODB_URI, {
        useNewUrlParser: true
    })
        .then(conn => {
            connection = conn;
            return connection;
        });
};


/* Board 오브젝트를 정의합니다. */
const boardSchema = mongoose.Schema({
    name: {
        type: String,
        required: true
    },
    title: {
        type: String,
        required: true
    },
    password: {
        type: String,
        required: true
    },
    content: {
        type: String,
        required: true
    },
    date: {
        type: Date,
        required: true
    },
    comment: [{
        name: {
        type: String,
        required: true
            },
        password: {
        type: String,
        required: true
            },
        content: {
        type: String,
        required: true
            },
        date: {
        type: Date,
        required: true
            }
    }]
});



            autoIncrement.initialize(mongoose.connection);

            boardSchema.plugin(autoIncrement.plugin,'board');

module.exports.handler = (event, context, callback) => {
    context.callbackWaitsForEmptyEventLoop =false;
    let operation = event.httpMethod;

    let Board = mongoose.model('board', boardSchema);
    
    
    
    let proxy, password;
    let body=JSON.parse(event.body);
    switch (operation) {
        case 'GET':
            /* 경로: /board 설명: 전체 게시글 정보를 불러옵니다. */
            if (event.pathParameters === null) {
                let query = {};
                let pageNum=0;
                if(event.queryStringParameters!=null){
                    if (event.queryStringParameters.name) {
                        query.name = {
                            $regex: event.queryStringParameters.name,
                            $options: 'i'
                        };
    
                    }
                    if (event.queryStringParameters.title) {
                        query.title = {
                            $regex: event.queryStringParameters.title,
                            $options: 'i'
                        };
    
                    }
                    if (event.queryStringParameters.content) {
                        query.content = {
                            $regex: event.queryStringParameters.content,
                            $options: 'i'
                        };
    
                    } 
                    if (event.queryStringParameters.pageNum) {
                        pageNum=event.queryStringParameters.pageNum;
    
                    }
                }// name과 content를 이용하여 검색한 결과를 내림차순으로 반환합니다. 
                connect().then(() => 
                Board.find(query)
                    .skip(pageNum*20)
                    .limit(20)
                    .select("-password")
                    //.select("-comment")
                    .select("-content")
                    .sort({
                        _id: -1
                    })
                    .exec(function (error, boards) {
                        if (error) {
                            callback(null, {
                                'statusCode': 500,
                                'body': JSON.stringify(error)
                            });
                        } else {
                             Board.countDocuments({}, function( err, count){
                                 if (err) {
                            callback(null, {
                                'statusCode': 500,
                                'body': JSON.stringify(error)
                            });
                        }else{
                                let jArray ="{\"pagenum\":\""+count/20+"\","+"\"boardlist\":"+JSON.stringify(boards)+"}";
                        


                                callback(null, {
                                'statusCode': 200,
                                'body':jArray
                            });
                            }});
                            

                        }

                    }));

            }
            /* 경로: /board/:id 설명: 특정 게시글 정보를 불러옵니다. */
            else {
                proxy = event.pathParameters.proxy;
                connect().then(() => Board.findOne({
                    _id: proxy
                })
                    //.select("-password")
                    .exec(function (err, board) {
                        if (err) {
                            callback(null, {
                                'statusCode': 500,
                                'body': JSON.stringify(err)
                            });

                        } else if (!board) {
                            callback(null, {
                                'statusCode': 500,
                                'body': JSON.stringify("Board not found.")
                            });

                        } else {
                            callback(null, {
                                'statusCode': 200,
                                'body': JSON.stringify(board)
                            });
                        }
                    }));
            }
            break;
        case 'POST':
            /* 경로: /board 파라미터: {"name":"작성자","content":"내용","password":"비밀번호"} 설명: 특정 게시글을 작성합니다. */
            connect().then(()=>{
            const {
                title,
                name,
                content,
                password
            } = body;
            const newBoard = new Board({
                title,
                name,
                content,
                password
                });
            newBoard.date = new Date();
            newBoard.save(function (err, board) {
                    if (err) {
                    callback(null, {
                        'statusCode': 500,
                        'body': JSON.stringify(err)
                        });
                    } else {
                        callback(null, {
                            'statusCode': 200,
                            'body': JSON.stringify(board._id)
                        });

                    }
                });
            });
            break;
        case 'PUT':
            /* 경로: /board/:id 헤더: password:"현재 비밀번호" 파라미터: {"name":"작성자","content":"내용","password":"비밀번호"} 설명: 특정 게시글을 수정합니다. */
            proxy = event.pathParameters.proxy;
            password = body.password; 
            // 사용자가 입력한 번호의 게시물을 찾습니다. 
            connect().then(() => Board.findOne({
                _id: proxy
            }).exec(function (err, board) {
                if (err) {
                    callback(null, {
                        'statusCode': 500,
                        'body': JSON.stringify(err)

                    });
                } else if (!board) {
                    callback(null, {
                        'statusCode': 500,
                        'body': JSON.stringify("Board not found.")
                    });
                } else {
                    if (board.password!=password) {
                        callback(null, {
                            'statusCode': 500,
                            'body': JSON.stringify("Password is incorrect."+board.password+":"+password)
                        });
                    } else {
                        const {
                            title,
                            name,
                            content,
                            password
                        } = JSON.parse(event.body); // 사용자가 입력한 name, content, password에 맞게 정보를 변경합니다. 
                        Board.findOneAndUpdate({
                            _id: proxy
                        }, {
                            title,
                            name,
                            content,
                            password
                        }).exec(function (err, board) {
                            if (err) {
                                callback(null, {
                                    'statusCode': 500,
                                    'body': JSON.stringify(err)
                                });
                            } else {
                                callback(null, {
                                    'statusCode': 200,
                                    'body': JSON.stringify('success')
                                });
                            }
                        });
                    }
                }
            }));
            break;
        case 'DELETE':
            /* 경로: /board/:id 헤더: password:"현재 비밀번호" 설명: 특정 게시글을 삭제합니다. */ 
            proxy = event.pathParameters.proxy;
            password = event.headers.password; 
            connect().then(() => Board.findOne({
                _id: proxy
            }).exec(function (err, board) {
                if (err) {
                    callback(null, {
                        'statusCode': 500,
                        'body': JSON.stringify(err)
                    });
                } else if (!board) {
                    callback(null, {
                        'statusCode': 500,
                        'body': JSON.stringify("Board not found.")
                    });
                } else {
                    if (board.password != password) {
                        callback(null, {
                            'statusCode': 500,
                            'body': JSON.stringify("Password is incorrect.")
                        });
                    } else { // 사용자가 입력한 번호에 해당하는 게시물을 삭제합니다. 
                        Board.findOneAndRemove({
                            _id: proxy
                        }).exec(function (err, board) {
                            if (err) {
                                callback(null, {
                                    'statusCode': 500,
                                    'body': JSON.stringify(err)
                                });
                            } else {
                                callback(null, {
                                    'statusCode': 200,
                                    'body': JSON.stringify(board)
                                });
                            }
                        });
                    }
                }
            }));
            break;
        default:
          callback(null, {
                          'statusCode': 500,
                          'body': 'Unrecognized operation '+ operation
                          });
            //callback(new Error(`Unrecognized operation "${operation}"`));
    }
};
