"use strict";
const mongoose = require('mongoose');
const autoIncrement = require('mongoose-auto-increment');

const MONGODB_URI = process.env.MONGODB_URI;

/* 하나의 연결 객체를 반복적으로 사용합니다. */
let connection = null;
const connect = () => {
    if (connection && mongoose.connection.readyState === 1) return Promise.resolve(connection);
    return mongoose.connect(process.env.MONGODB_URI, {
        useNewUrlParser: true
    })
        .then(conn => {

            connection = conn;
            return connection;
        });
};


const boardSchema = mongoose.Schema({
    tag: {
        type: String,
        required: true
    },
    imag: {
        type: String,
        required: true
    },
    name: {
        type: String,
        required: true
    },
    title: {
        type: String,
        required: true
    },
    password: {
        type: String,
        required: true
    },
    content: {
        type: String,
        required: true
    },
    
    date: {
        type: Date,
        required: true
    },
    comment: [{
        name: {
        type: String,
        required: true
            },
        password: {
        type: String,
        required: true
            },
        content: {
        type: String,
        required: true
            },
        date: {
        type: Date,
        required: true
            }
    }]
});



            autoIncrement.initialize(mongoose.connection);
            boardSchema.plugin(autoIncrement.plugin,'recommend_board');


module.exports.handler = (event, context, callback) => {
    context.callbackWaitsForEmptyEventLoop =false;
    let operation = event.httpMethod;

    let Board = mongoose.model('recommend_board', boardSchema);
    
    
    
    let proxy, password;
    let body=JSON.parse(event.body);
    switch (operation) {
        case 'POST':
            proxy = event.pathParameters.proxy;
                connect().then(() => Board.findOne({
                    _id: proxy
                })
                    .select("-password")
                    .exec(function (err, board) {
                        if (err) {
                            callback(null, {
                                'statusCode': 500,
                                'body': JSON.stringify(err)
                            });

                        } else if (!board) {
                            callback(null, {
                                'statusCode': 500,
                                'body': JSON.stringify("Board not found.")
                            });

                        } else {
                            
                            const {
                            name,
                            content,
                            password
                            } = body;
                            const newBoard = {
                                "name":name,
                                "content":content,
                                "password":password
                                };
                            newBoard.date = new Date();
                            board.comment.push(newBoard);
                            board.save(function (err, board) {
                                    if (err) {
                                    callback(null, {
                                        'statusCode': 500,
                                        'body': JSON.stringify(err)
                                        });
                                
                                    } else {
                                        callback(null, {
                                            'statusCode': 200,
                                            'body': JSON.stringify(board)
                                        });
                
                                    }
                                });
                            
                        }
                    }));
            

        

            break;
        case 'DELETE':
            /* 경로: /board/:id 헤더: password:"현재 비밀번호" 설명: 특정 게시글을 삭제합니다. */ 
            proxy = event.pathParameters.proxy;

            let commentPassword = event.headers.commentpassword;             
            let commentId = event.headers.commentid; 


            connect().then(() => Board.findOne({
                _id: proxy
            }).exec(function (err, board) {
                if (err) {
                    callback(null, {
                        'statusCode': 500,
                        'body': JSON.stringify(err)
                    });
                } else if (!board) {
                    callback(null, {
                        'statusCode': 500,
                        'body': JSON.stringify("Board not found.")
                    });
                } else {
                    let comment=board.comment.id(commentId);
                            if (comment.password != commentPassword) {
                                callback(null, {
                                    'statusCode': 500,
                                    'body': JSON.stringify("Password is incorrect.")
                                });
                            } else { // 사용자가 입력한 번호에 해당하는 게시물을 삭제합니다. 
                            board.comment.pull(commentId);
                            board.save(function (err, board) {
                                    if (err) {
                                        callback(null, {
                                            'statusCode': 500,
                                            'body': JSON.stringify(err)
                                        });
                                    } else {
                                        callback(null, {
                                            'statusCode': 200,
                                            'body': JSON.stringify(comment)
                                        });
                                    }
                                }
                                );

                            
                        
                };                                
                }
            }));
            break;
        default:
          callback(null, {
                          'statusCode': 500,
                          'body': 'Unrecognized operation '+ operation
                          });
            //callback(new Error(`Unrecognized operation "${operation}"`));
    }
};
