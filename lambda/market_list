"use strict";
const mongoose = require('mongoose');

const MONGODB_URI = process.env.MONGODB_URI;

/* 하나의 연결 객체를 반복적으로 사용합니다. */
let connection = null;
const connect = () => {
    if (connection && mongoose.connection.readyState === 1) return Promise.resolve(connection);
    return mongoose.connect(process.env.MONGODB_URI, {
        useNewUrlParser: true
    })
        .then(conn => {
            connection = conn;
            return connection;
        });
};


/* Board 오브젝트를 정의합니다. */
const boardSchema = mongoose.Schema({
    name: {
        type: String,
        required: true
    },
    address: {
        type: String,
        required: true
        
    },
    phone: {
        type: String,
        required: true
    },
    menu: {
        type: String,
        required: true
        
    }
});




module.exports.handler = (event, context, callback) => {
    
    context.callbackWaitsForEmptyEventLoop =false;
    let operation = event.httpMethod;

    let Market = mongoose.model('market_list', boardSchema);
        let body=JSON.parse(event.body);

    
    switch (operation) {
        case 'GET':
                let query = {};
                            query.address = {
                            $regex: event.queryStringParameters.address,
                            $options: 'i'
                        };
                        query.menu = {
                            $regex: event.queryStringParameters.menu,
                            $options: 'i'
                        };
                connect().then(() => 
                Market.find(query)
                    .exec(function (error, markets) {
                        if (error) {
                            callback(null, {
                                'statusCode': 500,
                                'body': JSON.stringify(error)
                            });
                        } else {
                            
                            callback(null, {
                                'statusCode': 200,
                                'body':JSON.stringify(markets)
                            });

                        }

                    }));
            
            break;
        case 'POST':
            /* 경로: /board 파라미터: {"name":"작성자","content":"내용","password":"비밀번호"} 설명: 특정 게시글을 작성합니다. */
            connect().then(()=>{
          
            const newBoard = new Market();
            newBoard.name=body.name;
            newBoard.phone=body.phone;
            newBoard.address=body.address;
            newBoard.menu=body.menu;

            

            newBoard.save(function (err, board) {
                    if (err) {
                    callback(null, {
                        'statusCode': 500,
                        'body': JSON.stringify(err)
                        });
                    } else {
                        callback(null, {
                            'statusCode': 200,
                            'body': JSON.stringify(board._id)
                        });

                    }
                });
            });
            break;
        default:
          callback(null, {
                          'statusCode': 500,
                          'body': 'Unrecognized operation '+ operation
                          });
    }
};
